{"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc://Locks/documentation/Locks"},"kind":"symbol","metadata":{"externalID":"Locks","modules":[{"name":"Locks"}],"role":"collection","roleHeading":"Framework","symbolKind":"module","title":"Locks"},"references":{"doc://Locks/documentation/Locks":{"abstract":[],"identifier":"doc://Locks/documentation/Locks","kind":"symbol","role":"collection","title":"Locks","type":"topic","url":"/documentation/locks"},"doc://Locks/documentation/Locks/Atomic":{"abstract":[{"text":"A thread-safe wrapper for a value","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atomic"}],"identifier":"doc://Locks/documentation/Locks/Atomic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Atomic"}],"role":"symbol","title":"Atomic","type":"topic","url":"/documentation/locks/atomic"},"doc://Locks/documentation/Locks/AtomicDictionary":{"abstract":[{"text":"A thread-safe dictionary that can be used to store key-value pairs","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicDictionary"}],"identifier":"doc://Locks/documentation/Locks/AtomicDictionary","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomicDictionary"}],"role":"symbol","title":"AtomicDictionary","type":"topic","url":"/documentation/locks/atomicdictionary"},"doc://Locks/documentation/Locks/AtomicSet":{"abstract":[{"text":"A thread-safe set that can be used to store elements","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicSet"}],"identifier":"doc://Locks/documentation/Locks/AtomicSet","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomicSet"}],"role":"symbol","title":"AtomicSet","type":"topic","url":"/documentation/locks/atomicset"},"doc://Locks/documentation/Locks/Foundation":{"abstract":[],"identifier":"doc://Locks/documentation/Locks/Foundation","kind":"symbol","role":"collection","title":"Foundation","type":"topic","url":"/documentation/locks/foundation"},"doc://Locks/documentation/Locks/Mutex":{"abstract":[{"text":"A thread-safe lock","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"identifier":"doc://Locks/documentation/Locks/Mutex","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"role":"symbol","title":"Mutex","type":"topic","url":"/documentation/locks/mutex"},"doc://Locks/documentation/Locks/ReadWriteLock":{"abstract":[{"text":"A thread-safe read-write lock","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReadWriteLock"}],"identifier":"doc://Locks/documentation/Locks/ReadWriteLock","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ReadWriteLock"}],"role":"symbol","title":"ReadWriteLock","type":"topic","url":"/documentation/locks/readwritelock"},"doc://Locks/documentation/Locks/RecursiveMutex":{"abstract":[{"text":"RecursiveMutex is a class that implements a recursive mutex lock.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveMutex"}],"identifier":"doc://Locks/documentation/Locks/RecursiveMutex","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RecursiveMutex"}],"role":"symbol","title":"RecursiveMutex","type":"topic","url":"/documentation/locks/recursivemutex"},"doc://Locks/documentation/Locks/ThreadLocal":{"abstract":[{"text":"Thread Local Property Wrapper. A property marked with this wrapper will reserve storage for each thread so","type":"text"},{"text":" ","type":"text"},{"text":"that the values gotten and set will only be seen by that thread.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ThreadLocal"}],"identifier":"doc://Locks/documentation/Locks/ThreadLocal","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ThreadLocal"}],"role":"symbol","title":"ThreadLocal","type":"topic","url":"/documentation/locks/threadlocal"},"doc://Locks/documentation/Locks/UnfairLock":{"abstract":[{"text":"UnfairLock is a class that implements the NSLocking protocol. It uses the os_unfair_lock_t","type":"text"},{"text":" ","type":"text"},{"text":"to provide a lock that is more performant than a traditional spinlock.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnfairLock"}],"identifier":"doc://Locks/documentation/Locks/UnfairLock","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnfairLock"}],"role":"symbol","title":"UnfairLock","type":"topic","url":"/documentation/locks/unfairlock"}},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"topicSections":[{"identifiers":["doc://Locks/documentation/Locks/Atomic","doc://Locks/documentation/Locks/Mutex","doc://Locks/documentation/Locks/ReadWriteLock","doc://Locks/documentation/Locks/RecursiveMutex","doc://Locks/documentation/Locks/UnfairLock"],"title":"Classes"},{"identifiers":["doc://Locks/documentation/Locks/AtomicDictionary","doc://Locks/documentation/Locks/AtomicSet","doc://Locks/documentation/Locks/ThreadLocal"],"title":"Structures"},{"identifiers":["doc://Locks/documentation/Locks/Foundation"],"title":"Extended Modules"}],"variants":[{"paths":["/documentation/locks"],"traits":[{"interfaceLanguage":"swift"}]}]}
